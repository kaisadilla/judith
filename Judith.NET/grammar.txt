syntax_node             > import_dir
                        | module_dir
                        | implementation
                        | hidable_item
                        ;

import_dir              > "import" member_access_expr
                        ;

module_dir              > "module" IDENTIFIER ( "::" IDENTIFIER )?
                        ;

hidable_item            > "hid"? ( enum_dir | symbol_dir | template_def | function_def | type_def )
                        ;

implementation          > "impl" ( ext_method_def | ext_ctor_def | ext_interface_impl )
                        ;

ext_method_def          > "impure"? ( "func" | "generator" ) member_access_expr "(" param_list ")" type_annotation? body_stmt
                        ;

ext_ctor_def            > ( "ctor" ) member_access_expr "(" param_list ")" body_stmt
                        ;

ext_interface_impl      > member_access_expr "for" member_access_expr ( method_def | method_decl )* "end"
                        ;

enum_dir                > "enumerate" IDENTIFIER? enum_item+ "end"
                        ;

symbol_def              > "symbol" IDENTIFIER ( "=" logical_expr )?
                        ;

template_def            > "template" "<" template_param_list ">" trule_def* ( function_def | type_def ) -- TODO: these functions and types can have type parameters when specializing a template.
                        ;

trule_def               > "trule" "<" trule ">"
                        ;

trule                   > "func" member_access_expr func_signature
                        | "oper" member_access_expr operator member_access_expr

function_def            > ( "func" | "generator" ) IDENTIFIER "(" param_list ")" type_annotation? body_stmt
                        ;

type_def                > "typedef" ( union_type_def | set_type_def | struct_type_def | interface_type_def | class_type_def )

union_type_def          > IDENTIFIER "=" member_access_expr ( "|" member_access_expr)+
                        | alias_type_def
                        ;

alias_type_def          > IDENTIFIER "=" member_access_expr
                        ;

set_type_def            > "set" IDENTIFIER logical_expr+ "end"
                        ;

struct_type_def         > "struct" IDENTIFIER ( member_access_expr | (IDENTIFIER "?"? type_annotation ( "=" logical_expr )? ) )*
                        ;

interface_type_def      > "interface" IDENTIFIER ( symbol_def | method_def | method_decl )* "end"
                        ;

class_type_def          > "class" IDENTIFIER class_member* "end"
                        ;

class_member            > symbol_def
                        | memb_field_def
                        | memb_method_def
                        | memb_ctor_def
                        | interface_impl
                        ;

memb_field_def          > ( "pub" | "hid" )? "static"? "mut"? IDENTIFIER type_annotation ( "=" logical_expr )?
                        ;

memb_method_def         > "hid"? "static"? "impure"? ( "func" | "generator" ) IDENTIFIER "(" param_list ")" type_annotation? body_stmt
                        ;

memb_ctor_def           > "hid"? "ctor" IDENTIFIER? "(" param_list ")" body_stmt
                        ;

interface_impl          > member_access_expr ( method_def | method_decl )* "end"
                        ;

body_stmt{a?}           > block_stmt{a?}
                        | arrow_stmt

block_stmt              > a? syntax_node* "end"? -- block_stmt is implicitly ended if the next token is "elsif" or "else".
                        ;

arrow_stmt              > "=>" statement
                        ;

statement               > local_decl_stmt
                        | return_stmt
                        | yield_stmt
                        | break_stmt
                        | continue_stmt
                        | expression_stmt
                        ;

local_decl_stmt         > ( "const" | "var" ) impl_local_decl ( "," local_decl )* ( "=" expression )?
                        | ( "const" | "var" ) "[" IDENTIFIER ( "," IDENTIFIER )* "]" "=" expression
                        | ( "const" | "var" ) "{" IDENTIFIER ( "," IDENTIFIER )* "}" "=" expression
                        ;

return_stmt             > "return" ( expression )? ( "when" expression )?
                        ;

yield_stmt              > "yield" ( expression )? ( "when" expression )?
                        ;

break_stmt              > "break" ( NUMBER )? ( "when" expression )?
                        ;

continue_stmt           > "continue" ( NUMBER )? ( "when" expression )?
                        ;

expression_stmt         > expression
                        ;

expression              > if_expr
                        | match_expr
                        | loop_expr
                        | while_expr
                        | foreach_expr
                        | __p_print_expr
                        | range_expr
                        ;

if_expr                 > "if" expression body_stmt{"then"} ( "elsif" expression body_stmt{"then"} )* ( "else" body_stmt{"then"} )?
                        ;

match_expr              > "match" expression "do" ( pattern ( "," pattern )* body_stmt{"then"} )* ( "else" body_stmt )? "end"
                        ;

loop_expr               > "loop" body_stmt
                        ;

while_expr              > "while" expression "do" body_stmt
                        ;

foreach_expr            > "foreach" local_decl ( "," local_decl )? "in" expression "do" body_stmt
                        ;

range_expr              > assignment_expr ".." assignment_expr -- You cannot concatenate ranges (i.e. 3..5..9) because ".." maps to Range and Range doesn't accept another Range in its constructor.
                        ;

assignment_expr         > member_access_expr "=" logical_expr
                        | logical_expr
                        ;

logical_expr            > boolean_expr ( ( "and" | "or" ) boolean_expr )* -- The choice to give "and" and "or" the same precedence is deliberate.
                        ;

boolean_expr            > addition_expr ( ( "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" ) addition_expr)*
                        ;

addition_expr           > mult_expr ( ( "+" | "-" ) mult_expr )*
                        ;

mult_expr               > unary_left ( ( "*" | "/" | perc_operator ) unary_left )*
                        ;

unary_left              > ( "not" | "-" | "~" ) unary_left
                        | null_or_expr
                        ;

null_or_expr            > call_expr ( "??" call_expr )*
                        ;

call_expr               > member_access_expr ( "(" arg_list? ")" )?
                        | member_access_expr
                        ;

member_access_expr      > type_identifier_expr? (( "." | "::" ) type_identifier_expr)*
                        | primary_expr
                        ;

type_identifier_expr    > identifier_expr ( "<" template_arg_list ">" )?
                        ;

primary_expr            > identifier_expr
                        | literal_expr
                        ;

identifier_expr         > IDENTIFIER
                        ;

literal_expr            > literal
                        ;

literal                 > NUMBER
                        | STRING
                        | CHAR
                        | REGEX
                        | "true"
                        | "false"
                        | "null"
                        | "undefined"
                        ;

local_decl              > expl_local_decl
                        | impl_local_decl
                        ;

expl_local_decl         > ( "const" | "var" ) IDENTIFIER type_annotation?
                        ;

impl_local_decl         > IDENTIFIER type_annotation?
                        ;

type_annotation         > ":" ( member_access_expr | func_signature ) "?"?
                        ;

func_signature          > "(" ( member_access_expr ( "," member_access_expr )* )+ ")" "=>" member_access_expr
                        ;

perc_operator           > "%" IDENTIFIER
                        ;

param_list              > local_decl ( "=" logical_expr )? ( "," local_decl ( "=" logical_expr )? )*
                        ;

arg_list                > expression ( "," expression* )?
                        ;

template_param_list     > template_param ( "," template_param* )?
                        ;

template_param          > IDENTIFIER ( ":" ( "typename" | type_identifier_expr ) )?
                        ;

template_arg_list       > template_arg ( "," template_arg* )?
                        ;
                        
template_arg            > type_identifier_expr
                        | logical_expr
                        ;

enum_item               > IDENTIFIER ( "=" logical_expr )?
                        ;

pattern                 > ( "<" | "<=" | ">" | ">=" ) logical_expr
                        | range_expr
                        | logical_expr
                        ;

operator                > "+" | "-" | "*" | "/" | perc_operator | "==" | "!=" | "~=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "and" | "or" | "??"
                        ;



-- debug, will be removed --

__p_print_expr          > "__p_print" expression
                        ;
