syntax_node             > import_dir
                        | module_dir
                        | implementation
                        | hidable_item
                        ;

import_dir              > "import" access_expr
                        ;

module_dir              > "module" qualified_identifier
                        ;

implementation          > "impl" ( ext_method_def | ext_ctor_def | ext_interface_impl )
                        ;

ext_method_def          > "impure"? ( "func" | "generator" ) access_expr "(" param_list ")" type_annotation? body_stmt
                        ;

ext_ctor_def            > ( "ctor" ) access_expr "(" param_list ")" body_stmt
                        ;

ext_interface_impl      > access_expr "for" access_expr ( method_def | method_decl )* "end"
                        ;

hidable_item            > "hid"? ( enum_dir | symbol_dir | template_def | function_def | type_def ) -- TODO: template_def goes before "hid".
                        ;

enum_dir                > "enumerate" IDENTIFIER? enum_item+ "end"
                        ;

symbol_def              > "symbol" IDENTIFIER ( "=" logical_expr )?
                        ;

template_def            > "template" "<" template_param_list ">" trule_def* ( function_def | type_def ) -- TODO: these functions and types can have type parameters when specializing a template.
                        ;

trule_def               > "trule" "<" trule ">"
                        ;

trule                   > "func" access_expr func_signature
                        | "oper" access_expr operator access_expr

function_def            > ( "func" | "generator" ) IDENTIFIER "(" param_list ")" type_annotation? body_stmt
                        ;

type_def                > "typedef" ( alias_type_def | option_type_def | struct_type_def | interface_type_def | class_type_def )
                        ;

alias_type_def          > "expl"? IDENTIFIER "=" type
                        ;

option_type_def         > "option" IDENTIFIER ( "'" STRING "'" ( tuple_array_type | object_type )? ) "end"
                        ;

struct_type_def         > "struct" IDENTIFIER member* "end" -- every member declaration is valid syntax, but not necessarily semantically valid.
                        ;

interface_type_def      > "interface" IDENTIFIER ( symbol_def | method_def | method_decl )* "end"
                        ;

class_type_def          > "class" IDENTIFIER class_member* "end"
                        ;

member                  > symbol_def
                        | memb_field_def
                        | memb_method_def
                        | memb_ctor_def
                        | interface_impl
                        ;

memb_field_def          > ( "pub" | "hid" )? "static"? "mut"? IDENTIFIER type_annotation ( "=" logical_expr )?
                        ;

memb_method_def         > "hid"? "static"? "impure"? ( "func" | "generator" ) IDENTIFIER "(" param_list ")" type_annotation? body_stmt
                        ;

memb_ctor_def           > "hid"? "ctor" IDENTIFIER? "(" param_list ")" body_stmt
                        ;

interface_impl          > access_expr ( method_def | method_decl )* "end"
                        ;

body_stmt{a?}           > block_stmt{a?}
                        | arrow_stmt

block_stmt              > a? syntax_node* "end"? -- block_stmt is implicitly ended if the next token is "elsif" or "else".
                        ;

arrow_stmt              > "=>" statement
                        ;

statement               > local_decl_stmt
                        | return_stmt
                        | yield_stmt
                        | break_stmt
                        | continue_stmt
                        | expression_stmt
                        ;

local_decl_stmt         > ( "const" | "var" ) impl_local_declarator ( "," local_declarator )* ( "=" expression )?
                        | ( "const" | "var" ) "[" IDENTIFIER ( "," IDENTIFIER )* "]" "=" expression
                        | ( "const" | "var" ) "{" IDENTIFIER ( "," IDENTIFIER )* "}" "=" expression
                        ;

return_stmt             > "return" ( expression )?
                        ;

yield_stmt              > "yield" expression
                        ;

break_stmt              > "break" ( NUMBER )?
                        ;

continue_stmt           > "continue" ( NUMBER )?
                        ;

expression_stmt         > expression
                        ;

expression              > if_expr
                        | match_expr
                        | loop_expr
                        | while_expr
                        | foreach_expr
                        | when_expr
                        | __p_print_expr
                        | range_expr
                        ;

if_expr                 > "if" expression body_stmt{"then"} ( "elsif" expression body_stmt{"then"} )* ( "else" body_stmt{"then"} )?
                        ;

match_expr              > "match" expression "do" ( pattern ( "," pattern )* body_stmt{"then"} )* ( "else" body_stmt )? "end"
                        ;

loop_expr               > "loop" body_stmt
                        ;

while_expr              > "while" expression "do" body_stmt
                        ;

foreach_expr            > "foreach" local_declarator ( "," local_declarator )? "in" expression "do" body_stmt
                        ;

when_expr               > statement "when" expression
                        ;

range_expr              > assignment_expr ".." assignment_expr -- You cannot concatenate ranges (i.e. 3..5..9) because ".." maps to Range and Range doesn't accept another Range in its constructor.
                        ;

assignment_expr         > access_expr "=" assignment_expr
                        | or_logical_expr
                        ;

or_logical_expr         > boolean_expr ( "or" boolean_expr )*
                        ;

and_logical_expr        > boolean_expr ( "and" boolean_expr )*
                        ;

boolean_expr            > addition_expr ( ( "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" ) addition_expr)*
                        ;

addition_expr           > mult_expr ( ( "+" | "-" ) mult_expr )*
                        ;

mult_expr               > null_or_expr ( ( "*" | "/" | perc_operator ) null_or_expr )*
                        ;

null_or_expr            > unary_left ( "??" unary_left )*
                        ;

unary_left              > ( "not" | "-" | "~" ) unary_left
                        | object_init_expr
                        ;

object_init_expr        > call_expr? "{" (IDENTIFIER "=" expression)* "}"
                        ;

call_expr               > access_expr ( "(" arg_list? ")" )?
                        ;

access_expr             > cast_expr? ( "." cast_expr )+
                        | cast_expr
                        ;

cast_expr               > primary_expr ( ( ":" | ":?" ) primary_expr )*
                        ;

primary_expr            > literal_expr
                        | identifier_expr
                        | group_expr
                        | object_init_expr
                        ;

identifier_expr         > qualified_identifier template_arg_list?
                        ;

literal_expr            > literal
                        ;

group_expr              > "(" expression ")"
                        ;

qualified_identifier    > IDENTIFIER ("::" IDENTIFIER)*
                        ;

literal                 > NUMBER
                        | STRING
                        | CHAR
                        | REGEX
                        | "true"
                        | "false"
                        | "null"
                        | "undefined"
                        ;

local_declarator        > expl_local_declarator
                        | impl_local_declarator
                        ;

expl_local_declarator   > ( "const" | "var" ) IDENTIFIER type_annotation?
                        ;

impl_local_declarator   > IDENTIFIER type_annotation?
                        ;

type_annotation         > ":" ( type ) "?"?
                        ;

func_signature          > "(" ( access_expr ( "," access_expr )* )+ ")" "=>" access_expr
                        ;

perc_operator           > "%" IDENTIFIER
                        ;

param_list              > "(" local_declarator ( "=" logical_expr )? ( "," local_declarator ( "=" logical_expr )? )* ")"
                        ;

arg_list                > "(" expression ( "," expression* )? ")"
                        ;

template_param_list     > "<" template_param ( "," template_param* )? ">"
                        ;

template_param          > IDENTIFIER ( ":" ( "typename" | identifier_expr ) )?
                        ;

template_arg_list       > "<" template_arg ( "," template_arg* )? ">"
                        ;
                        
template_arg            > identifier_expr
                        | logical_expr
                        ;

enum_item               > IDENTIFIER ( "=" logical_expr )?
                        ;

pattern                 > ( "<" | "<=" | ">" | ">=" ) logical_expr
                        | range_expr
                        | logical_expr
                        ;

operator                > "+" | "-" | "*" | "/" | perc_operator | "==" | "!=" | "~=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "and" | "or" | "??"
                        ;

type                    > union_type
                        ;

union_type              > raw_array_type ("|" raw_array_type)*
                        ;

raw_array_type          > primary_type ("[" NUMBER "]")*
                        ;

primary_type            > "const"? ( identifier_type | function_type | tuple_array_type | object_type | literal_type ) "?"?
                        ;

identifier_type         > qualified_identifier
                        ;

function_type           > "(" type? ("," type)* ")" "->" type
                        ;

tuple_array_type        > "[" type ("," type)* "]"
                        ;

object_type             > "{" (IDENTIFIER "?"? ":" type)* "}"
                        ;

literal_type            > literal
                        ;



-- debug, will be removed --

__p_print_expr          > "__p_print" expression
                        ;
