const i1 = 1
const i2 = 1
const cycles = 20

fib_recur(i1, i2, cycles)
__p_print ""
__p_print "Fibonacci for you!"

--func fib (var a, b, const cycles: Num)
--    var i = 0
--
--    while i < cycles do
--        const next = a + b
--        a = b
--        b = next
--
--        print(next)
--
--        i = i + 1
--    end
--end

func fib_recur (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func print (n: Num)
    __p_print n
end

func print_str (str: String)
    __p_print str
end

func both_ret ()
    if true then
        return
    else
        return
    end
end

func some_ret ()
    if true then
        return
    end
end

func some_ret2 ()
    if true then
        return
    else
        __p_print "No ret"
    end
end

-- var a = 1
-- var b = 1
-- 
-- print_le_sum(a, b)
-- 5 + 5
-- -- funcname()
-- -- funcname(a,)
-- -- member.access("string",)
-- 
-- var i = 0
-- while i < 100 do
--     __p_print b
-- 
--     const temp = a + b
--     a = b
--     b = temp
-- 
--     i = i + 1
-- end
-- 
-- __p_print "That's what Fibonacci said."
-- 
-- return
-- 
-- func ignore1 () end
-- func ignore2 () end
-- func ignore3 (a: String) end
-- 
-- func print_le_sum (const a, b: Num)
--     __p_print (a + b)
--     return
-- end
-- 
-- func ignore4 () end

--const val1: Num = 11
--const val7 = 11
--const val2 = 7 * 3
--const val3 = 5 / 3 + 2
--const val4 = (4 + 1) + 1 * 16
--const val5 = val2
--const val6 = val5 + val3
--__p_print val1
--__p_print val2 + val3
--__p_print val6 + val5 + val4

--const my_str = "Dbl quotes"
--const my_str2 = `Backticks`
--__p_print my_str
--
--const i = 3
--if i + 3 then
--    const my_str3 = my_str2
--end
--const my_str3 = "Indeed"

-- const a = 3 > 5
-- const b = 1
-- const c = 1
-- const d = b == c
-- 
-- __p_print a
-- __p_print b
-- __p_print c
-- __p_print d
-- __p_print c > -5

--__p_print "first" and "second"
--__p_print "first" or "second"
--
--__p_print 1 and 3 and 5 + 7 and 9
--__p_print 10 or 20 or 30
--__p_print 100 and 200 or 300 and 400
--__p_print false or 9 * 3
--__p_print true or 9 * 3
--__p_print false and 9 * 3
--__p_print true and 9 * 3
--
--if 3 > 5 then
--    __p_print "This is impossible!"
--else
--    __p_print "This always prints!"
--end
--
--__p_print "This can be printed."

func fib_recur0 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur1 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur2 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur3 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur4 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur5 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur6 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur7 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur8 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur9 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur10 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur11 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur12 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur13 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur14 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur15 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur16 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur17 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur18 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur19 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur20 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur21 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur22 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur23 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur24 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur25 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur26 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur27 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur28 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur29 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur30 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur31 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur32 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur33 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur34 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur35 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur36 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur37 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur38 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur39 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur40 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur41 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur42 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur43 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur44 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur45 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur46 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur47 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur48 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur49 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur50 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur51 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur52 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur53 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur54 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur55 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur56 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur57 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur58 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur59 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur60 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur61 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur62 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur63 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur64 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur65 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur66 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur67 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur68 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur69 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur70 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur71 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur72 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur73 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur74 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur75 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur76 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur77 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur78 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur79 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur80 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur81 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur82 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur83 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur84 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur85 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur86 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur87 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur88 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur89 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur90 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur91 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur92 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur93 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur94 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur95 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur96 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur97 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur98 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur99 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur100 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur101 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur102 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur103 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur104 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur105 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur106 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur107 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur108 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur109 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur110 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur111 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur112 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur113 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur114 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur115 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur116 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur117 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur118 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur119 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur120 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur121 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur122 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur123 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur124 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur125 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur126 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur127 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur128 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur129 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur130 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur131 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur132 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur133 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur134 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur135 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur136 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur137 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur138 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur139 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur140 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur141 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur142 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur143 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur144 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur145 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur146 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur147 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur148 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur149 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur150 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur151 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur152 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur153 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur154 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur155 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur156 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur157 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur158 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur159 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur160 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur161 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur162 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur163 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur164 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur165 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur166 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur167 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur168 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur169 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur170 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur171 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur172 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur173 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur174 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur175 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur176 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur177 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur178 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur179 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur180 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur181 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur182 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur183 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur184 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur185 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur186 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur187 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur188 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur189 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur190 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur191 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur192 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur193 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur194 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur195 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur196 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur197 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur198 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end

func fib_recur199 (a, b, cycles: Num)
    if cycles <= 0 then return end

    print(a)
    fib_recur(b, a + b, cycles - 1)
end